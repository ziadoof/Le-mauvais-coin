<?php

namespace App\Controller;

use App\Entity\Annonce;
use App\Entity\Category;
use App\Entity\Division;
use App\Entity\Specification;
use App\Form\AnnonceType;
use App\Repository\AnnonceRepository;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\UploadedFile;

/**
 * @Route("/annonce")
 */
class AnnonceController extends Controller
{
    /**
     * @Route("/", name="annonce_index", methods="GET")
     */
    public function index(AnnonceRepository $annonceRepository): Response
    {
        return $this->render('annonce/index.html.twig', ['annonces' => $annonceRepository->findAll()]);
    }

    /**
     * @Route("/new", name="annonce_new", methods="GET|POST")
     */
    public function new(Request $request): Response
    {
        $annonce = new Annonce();
        $specification = new Specification();
        $division = new Division();
        $category = new Category();
        $imeges = '/public/images';
       

        $annonce->setSpecifications($specification);
       // $annonce->setCategory($category);
       // $annonce->setDivision($division);

        $form = $this->createForm(AnnonceType::class, $annonce);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $annonce->setCreationDate(new \DateTime('NOW'));
            $annonce->setUser($this->getUser());
           // $annonce->setPhotos("ddddddd");
            $annonce->setCategory($annonce->getCategory());
            $specification->setDivision($annonce->getDivision());
            $em = $this->getDoctrine()->getManager();
            // $file stores the uploaded images file
            /**
             * @var Symfony\Component\HttpFoundation\File\UploadedFile $file
             *
             */
            $file = $form->get('photos')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
            $file->move(
                $this->getParameter('images_directory'),
                $fileName
            );
            $annonce->setPhotos($fileName);

            $em->persist($annonce);
            $em->flush();
            $this->addFlash(
                'success',
                'Votre nouvelle annonce a été enregistré.'
            );

            return $this->redirectToRoute('annonce_index');
        }

        return $this->render('annonce/new.html.twig', [
            'annonce' => $annonce,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="annonce_show", methods="GET")
     */
    public function show(Annonce $annonce): Response
    {
        return $this->render('annonce/show.html.twig', ['annonce' => $annonce]);
    }

    /**
     * @Route("/{id}/edit", name="annonce_edit", methods="GET|POST")
     */
    public function edit(Request $request, Annonce $annonce): Response
    {
        $form = $this->createForm(AnnonceType::class, $annonce);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('annonce_edit', ['id' => $annonce->getId()]);
        }

        return $this->render('annonce/edit.html.twig', [
            'annonce' => $annonce,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="annonce_delete", methods="DELETE")
     */
    public function delete(Request $request, Annonce $annonce): Response
    {
        if ($this->isCsrfTokenValid('delete'.$annonce->getId(), $request->request->get('_token'))) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($annonce);
            $em->flush();
        }

        return $this->redirectToRoute('annonce_index');
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
